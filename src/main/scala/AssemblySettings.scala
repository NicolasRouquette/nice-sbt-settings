/* ## Sbt-assembly-related settings

   This module defines settings to generate fat jar using [sbt-assembly plugin](https://github.com/softprops/assembly-sbt) and publish it,
*/
package ohnosequences.sbt.nice

import sbt._
import Keys._

import sbtassembly._, AssemblyKeys._

import ResolverSettings.autoImport._
import ohnosequences.sbt.SbtS3Resolver.autoImport._

import com.amazonaws.services.s3.AmazonS3Client
// import com.amazonaws.services.s3.model.{ Region => _ , _ }
// import com.amazonaws.services.s3.transfer.{Transfer, TransferManager}
import java.net.URI

case object AssemblySettings extends sbt.AutoPlugin {

  override def trigger = allRequirements
  override def requires =
    sbtassembly.AssemblyPlugin &&
    ResolverSettings

  case object autoImport {

    /* Classifier is the suffix appended to the artifact name */
    lazy val fatArtifactClassifier = settingKey[String]("Classifier of the fat jar artifact")

    /* This setting holds the url of the published fat artifact */
    lazy val fatArtifactUrl = settingKey[String]("URL of the published fat artifact")
    lazy val fatArtifactURI =    settingKey[URI]("URI of the published fat artifact")

    lazy val publishFatArtifact = taskKey[Unit]("Uploads fat-jar generated by sbt-assembly to fatArtifactUrl")
  }
  import autoImport._

  /* ### Settings */
  override lazy val projectSettings: Seq[Setting[_]] = Seq(
    // suffix for the fat artifact:
    fatArtifactClassifier := "fat",
    // turning off tests in assembly:
    test in assembly := {},

    // mvn: "[organisation]/[module]_[scalaVersion]/[revision]/[artifact]-[revision]-[classifier].[ext]"
    // ivy: "[organisation]/[module]_[scalaVersion]/[revision]/[type]s/[artifact]-[classifier].[ext]"
    fatArtifactUrl := {
      val isMvn = publishMavenStyle.value
      val scalaV = "_"+scalaBinaryVersion.value
      val module = moduleName.value + scalaV
      val artifact = Seq(
        if (isMvn) "" else "jars/",
        module,
        if (isMvn) s"-${version.value}" else "",
        s"-${fatArtifactClassifier.value}",
        ".jar"
      ).mkString

      Seq(
        publishS3Resolver.value.url,
        organization.value,
        module,
        version.value,
        artifact
      ).mkString("/")
    },

    /* This just parses S3 URI from the other string setting. It's defined as setting to check that it parses correctly on sbt load (insteda of on the publishFatArtifact task call). */
    fatArtifactURI := { new URI(fatArtifactUrl.value) },

    publishFatArtifact := {
      assembly.value

      lazy val bucket = fatArtifactURI.value.getHost
      lazy val key    = fatArtifactURI.value.getPath
      lazy val fatJar = assemblyOutputPath.in(assembly).value

      new AmazonS3Client(s3credentials.value).putObject(bucket, key, fatJar)
    }
  )

}
